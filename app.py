# -*- coding: utf-8 -*-
"""Untitled46.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OZdYRhn3G-pOtqVoXWD0spois6uJH4Zn
"""

## Conatins the implementation of model and app

from flask import Flask, jsonify, request, render_template

import numpy as np
import pandas as pd
import pickle
import nltk
nltk.download('punkt', download_dir='/app/nltk_data/')

##Initialising the flask

app = Flask(__name__)

@app.route('/')
def home():
  return render_template('index.html')

#Posting the user through request and reading the necessary pickle files

@app.route("/predict", methods=['POST'])
def predict():
  if (request.method == 'POST'):
    to_recom=[str(x) for x in request.form.values()]
    to_recom=to_recom[0]
    user_final_rating=pickle.load(open('user_final_rating.pkl','rb')) 
    pickled_user_final_rating = pd.read_pickle("user_final_rating.pkl")
    recommend_data=pickle.load(open("recommend_data.pkl",'rb'))
    pickled_recommend_data = pd.read_pickle("recommend_data.pkl")
  #product_name=recommend_data[['id','name']]
  #product_name = pd.DataFrame.drop_duplicates(product_name)
    product_name=pickle.load(open("product_name.pkl",'rb'))
    pickled_mapping = pd.read_pickle("product_name.pkl")
    pickled_user_final_rating = pickle.load(open('user_final_rating.pkl','rb')) 
    pickled_recommend_data=pickle.load(open('recommend_data.pkl','rb'))

##Finding if the user is available for the recommendation.
  
    if to_recom not in pickled_user_final_rating.index.tolist():
      return render_template("index.html", message="Oops! Either the user is not available in the directory or the recommendation is not available currently.Try with your other customers!")
    else:

      reco = user_final_rating.loc[to_recom].sort_values(ascending=False)[0:20]

      data_map=pickled_recommend_data[['id','name','brand','manufacturer']]
      data_map=pd.DataFrame.drop_duplicates(data_map)
      reco = pd.merge(reco,data_map,left_on='id',right_on='id', how = 'left')
# Predicting sentiment for the recommended products using the Logistic Regression model developed earlier

      sentiment_reco= pd.merge(reco,pickled_recommend_data[['id','pos_reviews_info']],left_on='id',right_on='id',how='left')

      pickle_tfidf_vectorizer=pickle.load(open('Tfidf_vectorizer.pkl','rb'))
      pickled_model=pickle.load(open('Logistic_Regression_Best_Model.pkl','rb'))

      sentiment_pred = pickle_tfidf_vectorizer.transform(sentiment_reco['pos_reviews_info'].astype('U'))
      sentiment_pred= pickled_model.predict(sentiment_pred)

      sentiment_pred = pd.DataFrame(sentiment_pred, columns=['Predicted_Sentiment'])
      sentiment_reco=pd.concat([sentiment_reco, sentiment_pred], axis=1)

      total_sentiment_count=sentiment_reco.groupby('id')['Predicted_Sentiment'].count().reset_index()
      total_sentiment_count.columns=['id','Total_Vote_Count']
      positive_reviews=sentiment_reco.groupby('id')['Predicted_Sentiment'].sum().reset_index()
      positive_reviews.columns = ['id', 'Total_Positive_vote_count']
      sentiment_recommendation=pd.merge(total_sentiment_count,positive_reviews,left_on='id',right_on='id',how='left')

      sentiment_recommendation['Positive_sentiment_rate'] = sentiment_recommendation['Total_Positive_vote_count'].div(sentiment_recommendation['Total_Vote_Count']).replace(np.inf, 0)

      sentiment_recommendation= sentiment_recommendation.sort_values(by=['Positive_sentiment_rate'], ascending=False )

      sentiment_recommendation=pd.merge(sentiment_recommendation,reco[['id','name']],left_on='id',right_on='id',how='left')

      sentiment_recommendation=pd.merge(sentiment_recommendation,data_map[['id','brand','manufacturer']],left_on='id',right_on='id',how='left')
      sentiment_recommendation=sentiment_recommendation[['name','brand','manufacturer']]
      sentiment_recommendation.rename(columns={'name':'Top_Priority_Product'})
      sentiment_recommendation=sentiment_recommendation.head()
      return render_template('index.html',column_names=sentiment_recommendation.columns.values, row_data=list(sentiment_recommendation.values.tolist()), zip=zip)
  #else:
      #return render_template('index.html')

if __name__ == '__main__':
  print('*** App Started ***')
  #app.run()
  app.run(host='127.0.0.1', port=5000)